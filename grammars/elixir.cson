'comment': 'Textmate bundle for Elixir Programming Language.'
'fileTypes': [
  'ex'
  'exs'
]
'firstLineMatch': '^#!/.*\\belixir'
'foldingStartMarker': '(after|else|catch|rescue|\\-\\>|\\{|\\[|do)\\s*$'
'foldingStopMarker': '^\\s*((\\}|\\]|after|else|catch|rescue)\\s*$|end\\b)'
'name': 'Elixir'
'patterns': [
  {
    'captures':
      '1':
        'name': 'keyword.control.module.elixir'
      '2':
        'name': 'entity.name.type.module.elixir'
    'match': '^\\s*(defmodule)\\s+(([A-Z]\\w*\\s*(\\.)\\s*)*[A-Z]\\w*)'
    'name': 'meta.module.elixir'
  }
  {
    'begin': '@(module|type)?doc (~[a-z])?"""'
    'comment': '@doc with heredocs is treated as documentation'
    'end': '\\s*"""'
    'name': 'comment.documentation.heredoc'
    'patterns': [
      {
        'include': '#interpolated_elixir'
      }
      {
        'include': '#escaped_char'
      }
    ]
  }
  {
    'begin': '@(module|type)?doc ~[A-Z]"""'
    'comment': '@doc with heredocs is treated as documentation'
    'end': '\\s*"""'
    'name': 'comment.documentation.heredoc'
  }
  {
    'comment': '@doc false is treated as documentation'
    'match': '@(module|type)?doc false'
    'name': 'comment.documentation.false'
  }
  {
    'begin': '@(module|type)?doc "'
    'comment': '@doc with string is treated as documentation'
    'end': '"'
    'name': 'comment.documentation.string'
    'patterns': [
      {
        'include': '#interpolated_elixir'
      }
      {
        'include': '#escaped_char'
      }
    ]
  }
  {
    'match': '(?<!\\.)\\b(do|end|case|bc|lc|for|if|cond|unless|try|receive|fn|defmodule|defp?|defprotocol|defimpl|defrecord|defstruct|defmacrop?|defdelegate|defcallback|defexception|defoverridable|exit|after|rescue|catch|else|raise|throw|import|require|alias|use|quote|unquote|super|when)\\b(?![?!])'
    'name': 'keyword.control.elixir'
  }
  {
    'comment': ' as above, just doesn\'t need a \'end\' and does a logic operation'
    'match': '(?<!\\.)\\b(and|not|or|when|xor|in|inlist|inbits)\\b'
    'name': 'keyword.operator.elixir'
  }
  {
    'match': '\\b(nil|true|false)\\b(?![?!])'
    'name': 'constant.language.elixir'
  }
  {
    'match': '\\b(__(CALLER|ENV|MODULE|DIR)__)\\b(?![?!])'
    'name': 'variable.language.elixir'
  }
  {
    'captures':
      '1':
        'name': 'punctuation.definition.variable.elixir'
    'match': '(@)[a-zA-Z_]\\w*'
    'name': 'variable.other.readwrite.module.elixir'
  }
  {
    'captures':
      '1':
        'name': 'punctuation.definition.variable.elixir'
    'match': '(&)\\d*'
    'name': 'variable.other.anonymous.elixir'
  }
  {
    'match': '\\b[A-Z]\\w*\\b'
    'name': 'variable.other.constant.elixir'
  }
  {
    'match': '\\b(0[xX]\\h(?>_?\\h)*|\\d(?>_?\\d)*(\\.(?![^[:space:][:digit:]])(?>_?\\d)*)?([eE][-+]?\\d(?>_?\\d)*)?|0[bB][01]+)\\b'
    'name': 'constant.numeric.elixir'
  }
  {
    'begin': ':\''
    'captures':
      '0':
        'name': 'punctuation.definition.constant.elixir'
    'end': '\''
    'name': 'constant.other.symbol.single-quoted.elixir'
    'patterns': [
      {
        'include': '#interpolated_elixir'
      }
      {
        'include': '#escaped_char'
      }
    ]
  }
  {
    'begin': ':"'
    'captures':
      '0':
        'name': 'punctuation.definition.constant.elixir'
    'end': '"'
    'name': 'constant.other.symbol.double-quoted.elixir'
    'patterns': [
      {
        'include': '#interpolated_elixir'
      }
      {
        'include': '#escaped_char'
      }
    ]
  }
  {
    'begin': '(?>\'\'\')'
    'beginCaptures':
      '0':
        'name': 'punctuation.definition.string.begin.elixir'
    'comment': 'Single-quoted heredocs'
    'end': '^\\s*\'\'\''
    'endCaptures':
      '0':
        'name': 'punctuation.definition.string.end.elixir'
    'name': 'support.function.variable.quoted.single.heredoc.elixir'
    'patterns': [
      {
        'include': '#interpolated_elixir'
      }
      {
        'include': '#escaped_char'
      }
    ]
  }
  {
    'begin': '\''
    'beginCaptures':
      '0':
        'name': 'punctuation.definition.string.begin.elixir'
    'comment': 'single quoted string (allows for interpolation)'
    'end': '\''
    'endCaptures':
      '0':
        'name': 'punctuation.definition.string.end.elixir'
    'name': 'support.function.variable.quoted.single.elixir'
    'patterns': [
      {
        'include': '#interpolated_elixir'
      }
      {
        'include': '#escaped_char'
      }
    ]
  }
  {
    'begin': '(?>""")'
    'beginCaptures':
      '0':
        'name': 'punctuation.definition.string.begin.elixir'
    'comment': 'Double-quoted heredocs'
    'end': '^\\s*"""'
    'endCaptures':
      '0':
        'name': 'punctuation.definition.string.end.elixir'
    'name': 'string.quoted.double.heredoc.elixir'
    'patterns': [
      {
        'include': '#interpolated_elixir'
      }
      {
        'include': '#escaped_char'
      }
    ]
  }
  {
    'begin': '"'
    'beginCaptures':
      '0':
        'name': 'punctuation.definition.string.begin.elixir'
    'comment': 'double quoted string (allows for interpolation)'
    'end': '"'
    'endCaptures':
      '0':
        'name': 'punctuation.definition.string.end.elixir'
    'name': 'string.quoted.double.elixir'
    'patterns': [
      {
        'include': '#interpolated_elixir'
      }
      {
        'include': '#escaped_char'
      }
    ]
  }
  {
    'begin': '~[a-z](?>""")'
    'beginCaptures':
      '0':
        'name': 'punctuation.definition.string.begin.elixir'
    'comment': 'Double-quoted heredocs sigils'
    'end': '^\\s*"""'
    'endCaptures':
      '0':
        'name': 'punctuation.definition.string.end.elixir'
    'name': 'string.quoted.double.heredoc.elixir'
    'patterns': [
      {
        'include': '#interpolated_elixir'
      }
      {
        'include': '#escaped_char'
      }
    ]
  }
  {
    'begin': '~[a-z]\\{'
    'beginCaptures':
      '0':
        'name': 'punctuation.definition.string.begin.elixir'
    'comment': 'sigil (allow for interpolation)'
    'end': '\\}[a-z]*'
    'endCaptures':
      '0':
        'name': 'punctuation.definition.string.end.elixir'
    'name': 'string.interpolated.elixir'
    'patterns': [
      {
        'include': '#interpolated_elixir'
      }
      {
        'include': '#escaped_char'
      }
      {
        'include': '#nest_curly'
      }
    ]
  }
  {
    'begin': '~[a-z]\\['
    'beginCaptures':
      '0':
        'name': 'punctuation.definition.string.begin.elixir'
    'comment': 'sigil (allow for interpolation)'
    'end': '\\][a-z]*'
    'endCaptures':
      '0':
        'name': 'punctuation.definition.string.end.elixir'
    'name': 'string.interpolated.elixir'
    'patterns': [
      {
        'include': '#interpolated_elixir'
      }
      {
        'include': '#escaped_char'
      }
      {
        'include': '#nest_brackets'
      }
    ]
  }
  {
    'begin': '~[a-z]\\<'
    'beginCaptures':
      '0':
        'name': 'punctuation.definition.string.begin.elixir'
    'comment': 'sigil (allow for interpolation)'
    'end': '\\>[a-z]*'
    'endCaptures':
      '0':
        'name': 'punctuation.definition.string.end.elixir'
    'name': 'string.interpolated.elixir'
    'patterns': [
      {
        'include': '#interpolated_elixir'
      }
      {
        'include': '#escaped_char'
      }
      {
        'include': '#nest_ltgt'
      }
    ]
  }
  {
    'begin': '~[a-z]\\('
    'beginCaptures':
      '0':
        'name': 'punctuation.definition.string.begin.elixir'
    'comment': 'sigil (allow for interpolation)'
    'end': '\\)[a-z]*'
    'endCaptures':
      '0':
        'name': 'punctuation.definition.string.end.elixir'
    'name': 'string.interpolated.elixir'
    'patterns': [
      {
        'include': '#interpolated_elixir'
      }
      {
        'include': '#escaped_char'
      }
      {
        'include': '#nest_parens'
      }
    ]
  }
  {
    'begin': '~[a-z]([^\\w])'
    'beginCaptures':
      '0':
        'name': 'punctuation.definition.string.begin.elixir'
    'comment': 'sigil (allow for interpolation)'
    'end': '\\1[a-z]*'
    'endCaptures':
      '0':
        'name': 'punctuation.definition.string.end.elixir'
    'name': 'string.interpolated.elixir'
    'patterns': [
      {
        'include': '#interpolated_elixir'
      }
      {
        'include': '#escaped_char'
      }
      {
        'include': '#escaped_char'
      }
    ]
  }
  {
    'begin': '~[A-Z](?>""")'
    'beginCaptures':
      '0':
        'name': 'punctuation.definition.string.begin.elixir'
    'comment': 'Double-quoted heredocs sigils'
    'end': '^\\s*"""'
    'endCaptures':
      '0':
        'name': 'punctuation.definition.string.end.elixir'
    'name': 'string.quoted.other.literal.upper.elixir'
  }
  {
    'begin': '~[A-Z]\\{'
    'beginCaptures':
      '0':
        'name': 'punctuation.definition.string.begin.elixir'
    'comment': 'sigil (without interpolation)'
    'end': '\\}[a-z]*'
    'endCaptures':
      '0':
        'name': 'punctuation.definition.string.end.elixir'
    'name': 'string.quoted.other.literal.upper.elixir'
    'patterns': [
      {
        'include': '#nest_curly'
      }
    ]
  }
  {
    'begin': '~[A-Z]\\['
    'beginCaptures':
      '0':
        'name': 'punctuation.definition.string.begin.elixir'
    'comment': 'sigil (without interpolation)'
    'end': '\\][a-z]*'
    'endCaptures':
      '0':
        'name': 'punctuation.definition.string.end.elixir'
    'name': 'string.quoted.other.literal.upper.elixir'
    'patterns': [
      {
        'include': '#nest_brackets'
      }
    ]
  }
  {
    'begin': '~[A-Z]\\<'
    'beginCaptures':
      '0':
        'name': 'punctuation.definition.string.begin.elixir'
    'comment': 'sigil (without interpolation)'
    'end': '\\>[a-z]*'
    'endCaptures':
      '0':
        'name': 'punctuation.definition.string.end.elixir'
    'name': 'string.quoted.other.literal.upper.elixir'
    'patterns': [
      {
        'include': '#nest_ltgt'
      }
    ]
  }
  {
    'begin': '~[A-Z]\\('
    'beginCaptures':
      '0':
        'name': 'punctuation.definition.string.begin.elixir'
    'comment': 'sigil (without interpolation)'
    'end': '\\)[a-z]*'
    'endCaptures':
      '0':
        'name': 'punctuation.definition.string.end.elixir'
    'name': 'string.quoted.other.literal.upper.elixir'
    'patterns': [
      {
        'include': '#nest_parens'
      }
    ]
  }
  {
    'begin': '~[A-Z]([^\\w])'
    'beginCaptures':
      '0':
        'name': 'punctuation.definition.string.begin.elixir'
    'comment': 'sigil (without interpolation)'
    'end': '\\1[a-z]*'
    'endCaptures':
      '0':
        'name': 'punctuation.definition.string.end.elixir'
    'name': 'string.quoted.other.literal.upper.elixir'
  }
  {
    'captures':
      '1':
        'name': 'punctuation.definition.constant.elixir'
    'comment': 'symbols'
    'match': '(?<!:)(:)(?>[a-zA-Z_][\\w@]*(?>[?!]|=(?![>=]))?|\\<\\>|===?|!==?|<<>>|<<<|>>>|~~~|::|<\\-|\\|>|=>|~|~=|=|/|\\\\\\\\|\\*\\*?|\\.\\.?\\.?|>=?|<=?|&&?&?|\\+\\+?|\\-\\-?|\\|\\|?\\|?|\\!|@|\\%?\\{\\}|%|\\[\\]|\\^(\\^\\^)?)'
    'name': 'constant.other.symbol.elixir'
  }
  {
    'captures':
      '1':
        'name': 'punctuation.definition.constant.elixir'
    'comment': 'symbols'
    'match': '(?>[a-zA-Z_][\\w@]*(?>[?!])?)(:)(?!:)'
    'name': 'constant.other.keywords.elixir'
  }
  {
    'captures':
      '1':
        'name': 'punctuation.definition.comment.elixir'
    'match': '(?:^[ \\t]+)?(#).*$\\n?'
    'name': 'comment.line.number-sign.elixir'
  }
  {
    'comment': """
			matches questionmark-letters.

			examples (1st alternation = hex):
			?\\x1     ?\\x61

			examples (2nd alternation = octal):
			?\\0      ?\\07     ?\\017

			examples (3rd alternation = escaped):
			?\\n      ?\\b

			examples (4th alternation = meta-ctrl):
			?\\C-a    ?\\M-a    ?\\C-\\M-\\C-\\M-a

			examples (4th alternation = normal):
			?a       ?A       ?0
			?*       ?"       ?(
			?.       ?#


			the negative lookbehind prevents against matching
			p(42.tainted?)
    """
    'match': '(?<!\\w)\\?(\\\\(x\\h{1,2}(?!\\h)\\b|0[0-7]{0,2}(?![0-7])\\b|[^x0MC])|(\\\\[MC]-)+\\w|[^\\s\\\\])'
    'name': 'constant.numeric.elixir'
  }
  {
    'begin': '(?<=\\{|do|\\{\\s|do\\s)(\\|)'
    'captures':
      '1':
        'name': 'punctuation.separator.variable.elixir'
    'end': '(\\|)'
    'patterns': [
      {
        'match': '[_a-zA-Z][_a-zA-Z0-9]*'
        'name': 'variable.other.block.elixir'
      }
      {
        'match': ','
        'name': 'punctuation.separator.variable.elixir'
      }
    ]
  }
  {
    'comment': 'matches: | ++ -- ** \\ <- <> << >> :: .. |> ~ => ->'
    'match': '\\+\\+|\\-\\-|\\*\\*|\\\\\\\\|\\<\\-|\\<\\>|\\<\\<|\\>\\>|\\:\\:|\\.\\.|\\|>|~|=>|->|\\|'
    'name': 'keyword.operator.other.elixir'
  }
  {
    'match': '\\+=|\\-=|\\|\\|=|~=|&&='
    'name': 'keyword.operator.assignment.augmented.elixir'
  }
  {
    'match': '===?|!==?|<=?|>=?'
    'name': 'keyword.operator.comparison.elixir'
  }
  {
    'match': '(\\|\\|\\||&&&|\\^\\^\\^|<<<|>>>|~~~)'
    'name': 'keyword.operator.bitwise.elixir'
  }
  {
    'match': '(?<=[ \\t])!+|\\bnot\\b|&&|\\band\\b|\\|\\||\\bor\\b|\\bxor\\b'
    'name': 'keyword.operator.logical.elixir'
  }
  {
    'match': '(\\*|\\+|\\-|/)'
    'name': 'keyword.operator.arithmetic.elixir'
  }
  {
    'match': '='
    'name': 'keyword.operator.assignment.elixir'
  }
  {
    'match': ':'
    'name': 'punctuation.separator.other.elixir'
  }
  {
    'match': '\\;'
    'name': 'punctuation.separator.statement.elixir'
  }
  {
    'match': ','
    'name': 'punctuation.separator.object.elixir'
  }
  {
    'match': '\\.'
    'name': 'punctuation.separator.method.elixir'
  }
  {
    'match': '\\{|\\}'
    'name': 'punctuation.section.scope.elixir'
  }
  {
    'match': '\\[|\\]'
    'name': 'punctuation.section.array.elixir'
  }
  {
    'match': '\\(|\\)'
    'name': 'punctuation.section.function.elixir'
  }
]
'repository':
  'escaped_char':
    'match': '\\\\(?:[0-7]{1,3}|x[\\da-fA-F]{1,2}|.)'
    'name': 'constant.character.escape.elixir'
  'interpolated_elixir':
    'patterns': [
      {
        'captures':
          '0':
            'name': 'punctuation.section.embedded.elixir'
          '1':
            'name': 'source.elixir.embedded.source.empty'
        'match': '#\\{(\\})'
        'name': 'source.elixir.embedded.source'
      }
      {
        'begin': '#\\{'
        'captures':
          '0':
            'name': 'punctuation.section.embedded.elixir'
        'end': '\\}'
        'name': 'source.elixir.embedded.source'
        'patterns': [
          {
            'include': '#nest_curly_and_self'
          }
          {
            'include': '$self'
          }
        ]
      }
    ]
  'nest_brackets':
    'begin': '\\['
    'captures':
      '0':
        'name': 'punctuation.section.scope.elixir'
    'end': '\\]'
    'patterns': [
      {
        'include': '#nest_brackets'
      }
    ]
  'nest_curly':
    'begin': '\\{'
    'captures':
      '0':
        'name': 'punctuation.section.scope.elixir'
    'end': '\\}'
    'patterns': [
      {
        'include': '#nest_curly'
      }
    ]
  'nest_curly_and_self':
    'patterns': [
      {
        'begin': '\\{'
        'captures':
          '0':
            'name': 'punctuation.section.scope.elixir'
        'end': '\\}'
        'patterns': [
          {
            'include': '#nest_curly_and_self'
          }
        ]
      }
      {
        'include': '$self'
      }
    ]
  'nest_ltgt':
    'begin': '\\<'
    'captures':
      '0':
        'name': 'punctuation.section.scope.elixir'
    'end': '\\>'
    'patterns': [
      {
        'include': '#nest_ltgt'
      }
    ]
  'nest_parens':
    'begin': '\\('
    'captures':
      '0':
        'name': 'punctuation.section.scope.elixir'
    'end': '\\)'
    'patterns': [
      {
        'include': '#nest_parens'
      }
    ]
  'regex_sub':
    'patterns': [
      {
        'include': '#interpolated_elixir'
      }
      {
        'include': '#escaped_char'
      }
      {
        'captures':
          '1':
            'name': 'punctuation.definition.arbitrary-repitition.elixir'
          '3':
            'name': 'punctuation.definition.arbitrary-repitition.elixir'
        'match': '(\\{)\\d+(,\\d+)?(\\})'
        'name': 'string.regexp.arbitrary-repitition.elixir'
      }
      {
        'begin': '\\[(?:\\^?\\])?'
        'captures':
          '0':
            'name': 'punctuation.definition.character-class.elixir'
        'end': '\\]'
        'name': 'string.regexp.character-class.elixir'
        'patterns': [
          {
            'include': '#escaped_char'
          }
        ]
      }
      {
        'begin': '\\('
        'captures':
          '0':
            'name': 'punctuation.definition.group.elixir'
        'end': '\\)'
        'name': 'string.regexp.group.elixir'
        'patterns': [
          {
            'include': '#regex_sub'
          }
        ]
      }
      {
        'captures':
          '1':
            'name': 'punctuation.definition.comment.elixir'
        'comment': 'We are restrictive in what we allow to go after the comment character to avoid false positives, since the availability of comments depend on regexp flags.'
        'match': '(?<=^|\\s)(#)\\s[[a-zA-Z0-9,. \\t?!-][^\\x{00}-\\x{7F}]]*$'
        'name': 'comment.line.number-sign.elixir'
      }
    ]
'scopeName': 'source.elixir'
