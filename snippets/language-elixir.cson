'.source.elixir':
  'callback':
    'prefix': 'callback'
    'body': '@callback ${1:function_name}($2) :: ${3:type}'
  'case':
    'prefix': 'case'
    'body': 'case $1 do\n\t$0\nend'
  'cond':
    'prefix': 'cond'
    'body': 'cond do\n\t$0\nend'
  'def':
    'prefix': 'def'
    'body': 'def ${1:function_name} do\n\t$0\nend'
  'defp':
    'prefix': 'defp'
    'body': 'defp ${1:function_name} do\n\t$0\nend'
  'defmacro':
    'prefix': 'defmacro'
    'body': 'defmacro ${1:macro_name} do\n\t$0\nend'
  'defmacrop':
    'prefix': 'defmacrop'
    'body': 'defmacrop ${1:macro_name} do\n\t$0\nend'
  'defmodule':
    'prefix': 'defmodule'
    'body': 'defmodule $1 do\n\t$0\nend'
  'defstruct':
    'prefix': 'defstruct'
    'body': 'defstruct [$1]'
  'doc':
    'prefix': 'doc'
    'body': '@doc """\n$0\n"""'
  'do':
    'prefix': 'do'
    'body': 'do\n\t$0\nend'
  'for':
    'prefix': 'for'
    'body': 'for $1 <- $2 do\n\t$3\nend'
  'if':
    'prefix': 'if'
    'body': 'if $1 do\n\t$0\nend'
  'inline def':
    'prefix': 'idef'
    'body': 'def $1, do: $2'
  'inline defp':
    'prefix': 'idefp'
    'body': 'defp $1, do: $2'
  'moduledoc':
    'prefix': 'mdoc'
    'body': '@moduledoc """\n$0\n"""'
  'defprotocol':
    'prefix': 'defpro'
    'body': 'defprotocol $1 do\n\t$0\nend'
  'defimpl':
    'prefix': 'defi'
    'body': 'defimpl ${1:protocol}, for: ${2:type} do\n\t$0\nend'
  'defoverridable':
    'prefix': 'defover'
    'body': 'defoverridable [${1:function_name}: ${2:arity}]'
  'IO.inspect':
    'prefix': 'ii'
    'body': 'IO.inspect($0)'
  'IO.puts':
    'prefix': 'ip'
    'body': 'IO.puts($0)'
  'Logger.debug':
    'prefix': 'deb'
    'body': 'Logger.debug "$0"'
  'Logger.debug inspect':
    'prefix': 'debi'
    'body': 'Logger.debug "\#{inspect $0}"'
  'spec':
    'prefix': 'spec'
    'body': '@spec ${1:function_name}($2) :: ${3:type}'
  'test':
    'prefix': 'test'
    'body': 'test "$1" do\n\t$0\nend'
  'type':
    'prefix': 'type'
    'body': '@type ${1:type_name} :: ${2:type}'
'.text.elixir':
  '<% inline %>':
    'prefix': '%'
    'body': '<% $0 %>'
  '<%= replace %>':
    'prefix': '%='
    'body': '<%= $0 %>'
  '<%% quotation %>':
    'prefix': '%%'
    'body': '<%% $0 %>'
  '<%# comment %>':
    'prefix': '%#'
    'body': '<%# $0 %>'
  'if':
    'prefix': 'if'
    'body': '<%= if ${1:true} do %>\n\t$0\n<% end %>'
  'if/else':
    'prefix': 'ife'
    'body': '<%= if ${1:true} do %>\n\t$2\n<% else %>\n\t$0\n<% end %>'
  'for':
    'prefix': 'for'
    'body': '<%= for ${1:el} <- ${2:list} do %>\n\t$0\n<% end %>'
